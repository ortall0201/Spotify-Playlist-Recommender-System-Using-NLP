# -*- coding: utf-8 -*-
"""Spotify_Recommender_System

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oodI-OxLr6octvE3IfT31vT6rFfOa6Tk
"""

import streamlit as st
import os
import zipfile
import requests
from gensim.models import Word2Vec

# Step 1: Set paths
base_dir = os.path.dirname(os.path.abspath(__file__))
model_dir = os.path.join(base_dir, "model_files")
os.makedirs(model_dir, exist_ok=True)  # Ensure the folder exists
zip_file_path = os.path.join(model_dir, "final4_word2vec_model.zip")

# Step 2: Download the model ZIP file
@st.cache_resource
def download_model():
    gcs_url = "https://storage.googleapis.com/spotify-word2vec-model/final4_word2vec_model.zip"  # Replace with your actual GCS URL
    response = requests.get(gcs_url, stream=True)
    if response.status_code == 200:
        with open(zip_file_path, "wb") as f:
            for chunk in response.iter_content(chunk_size=1024):
                if chunk:
                    f.write(chunk)
        return True
    else:
        st.error("Failed to download the model file.")
        return False

if not os.path.exists(zip_file_path):
    st.info("Downloading model from Google Cloud...")
    if download_model():
        st.success("Model downloaded successfully!")

# Step 3: Extract the ZIP file
extraction_folder = os.path.join(model_dir, "extracted_model")
if not os.path.exists(extraction_folder):
    try:
        with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
            zip_ref.extractall(extraction_folder)
        st.success("Model files extracted successfully!")
    except Exception as e:
        st.error(f"Error extracting model ZIP file: {e}")
        st.stop()

# Step 4: Load the Word2Vec model
model_path = os.path.join(extraction_folder, "final4_word2vec_model.model")
try:
    model = Word2Vec.load(model_path)
    st.success("Model loaded successfully!")
    st.write(f"Vocabulary size: {len(model.wv.index_to_key)}")
except Exception as e:
    st.error(f"Error loading model: {e}")
    st.stop()

# Step 5: Streamlit UI for Recommendations
st.title("ðŸŽµ Artist-Based Playlist Recommender ðŸŽµ")
st.markdown("Enter your preferred **artist:track** to get a personalized playlist!")

# Input box for user
user_input = st.text_input("Enter a song (artistname:trackname):", "")

# Recommendation logic
if user_input:
    try:
        if user_input in model.wv:
            recommendations = model.wv.most_similar(user_input, topn=10)
            st.subheader(f"Recommendations for **{user_input}**:")
            for idx, (rec, score) in enumerate(recommendations, start=1):
                st.write(f"{idx}. {rec} _(similarity: {score:.4f})_")
        else:
            st.error(f"'{user_input}' is not in the model's vocabulary. Try another song.")
    except Exception as e:
        st.error(f"Error during recommendation: {e}")

# Footer
st.markdown("""
---
**Disclaimer:** This app is for educational purposes only and is not affiliated with Spotify.
""")